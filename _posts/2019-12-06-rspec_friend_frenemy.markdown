---
layout: post
title:      "RSpec:Â friend/frenemy"
date:       2019-12-06 22:40:50 +0000
permalink:  rspec_friend_frenemy
---


It goes without saying that we owe a not-insignificant portion of our self-guided success in the SE coursework to the functionality of RSpec. Those tests â€“ sooo many tests over sooo many lessons â€“ are integral to the format of this curriculum, allowing us to learn from our mistakes then (eventually) get it right, with minimal (or no) intervention from others. 

So far (I have just finished the Fwitter lab), my relationship with RSpec seems to have gone through multiple phases. In the first phase, I very simply only ran the tests and read the results, making corrections until everything passed. The lessons were shorter and simpler then; fittingly, my goal orientation at that time was simpler too â€“Â just gotta get the tests passing so I can move on. I was grateful that someone else had taken the time to write the tests, as it was already enough of a task to absorb the lesson material. 

In my second RSpec phase, I would run the tests and read the results, but then also sometimes look at the tests themselves, for more insight into what the test was actually doing. This often expedited the failure-resolution process, as the test code sometimes held clues to what I should be doing that I couldn't quite glean from the results. Sometimes a portion of the test code actually seemed to do a better job laying out an expectation than the corresponding part of the lesson. 

In my third RSpec phase, I got into the habit of reading through the test code from beginning to end before starting anything, with the intention of comparing what I think the lesson is expecting to do, and what the tests are expecting me to do. At first I worried that this was sorta cheating, but then realized that it actually makes sense to do this. If I was the one writing tests before embarking on a project (as one does in real-world Test Driven Development), I would be even more attuned to what the test are expecting, because I would have written them! In our lessons, the tests are conveniently written out for us, saving us a time-consuming step and enabling us to get right to the task at hand. Despite this convenience of prewritten tests, it behooves us to peruse the tests initially. This helped me get more code right the first time; not just conceptually, but on a more granular level, too, like getting variables and attributes and outputs correct, to-the-letter.

My latest RSpec phase has been, in some ways, a bit of a regression. With Shotgun and Pry and Tux and DB Browser, it's possible to interact directly and immediately with all levels of a project, reducing reliance on RSpec. I can observe quite concretely if I'm achieving the desired results. It's more fun, honestly, tweaking code and reloading a web page or browsing a table, than running RSpec. It's easy to almost forget about the testing, because hey, it's working, right? But then, you run the tests as a necessary formality, and oh my god, so many errors. But more like "errors," in air quotes. Gotta go and update the text on my .erb files, my form input IDs and names, and so on, just so they match what the tests are looking for. Yes, even though it all works already. What happened to my previous habit of reading through all the tests before starting? Would have saved me some of this grief! Not to mention that once, on Fwitter, I found that I the way I'd coded to satisfy a requirement was actually superior, but there was no way to get two tests to pass without implementing an inferior and less-user-friendly approach. That's when I realized... 

... that I may actually be looking forward to the time when I'm writing the tests myself. Wait, what? I almost can't believe I just said that. Sure, it's undoubtedly time-consuming, but I'm warming to the idea, because I can now appreciate the advantages to putting in that effort. When that time comes, for starters (to refer to a concession I begrudgingly made repeatedly to tests), if I find myself working with artists and songs again, my songs can finally, rightfully, dreamily have *titles* instead of *names*, goddammit. ðŸ˜‰
