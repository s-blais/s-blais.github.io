---
layout: post
title:      "Building Vertically"
date:       2020-04-25 17:01:16 +0000
permalink:  building_vertically
---

My Rails project is chugging along nicely, I'm thrilled to report! After the the initial grind of setting up the environment, choosing gems, quashing several errors, and resolving a few new (to me) issues, I got started on building out my app. 

Through the Rails section of the curriculum, and perhaps even previous to that with Sinatra, it seemed that we were subtly nudged toward first figuring out our entire schemas, then writing our migrations, then creating all our tables, then fussing with models and controllers and views in somewhat scattershot order. In hindsight, my approach to fleshing out the MVCs was guided by the RSpec tests far more than any kind of structure, routine, or philosphy. Test Driven Development, indeed. It makes sense within that context, when the goal is to "go all green" in the tests and move on to the next lesson.

After several sessions of sketching out my models and their relationships, listing their attributes, and pressuring myself to get it all "just so" before getting anywhere, I changed course and went with what felt like a more natural approach to me. I decided to start with just the User model, and ignore everything else. I created just that one table, that one group of routes, that one controller, that one folder of views. Yup, it all works. Then, I moved onto the next model; created its table, its model, its routes, its relationship to the User model, its controller, its views. Yup, it all still works. The progression felt controlled and natural. It was also much easier, in the morning, to pick up where I'd left off the night (or even days) before, because I had so many fewer plates spinning. It surprised me that had an easier time resuming my work on my "big" Rails project than I did on any number of labs that I didn't finish in one sitting (even with just an hour or two away from my desk, it could sometimes take me a while to mentally rebuild where I was at in a lab).

Interestingly, the relationships between my yet-to-be-deployed models "clicked" in my mind much more readily as I was working my way toward them, model-by-model. By removing the self-imposed pressure to get the whole big picture perfectly described from the get-go, the relationships revealed themselves to me with less effort. I love a good analogy, and it felt like painting a picture, rather than sending a complete, to-the-pixel image file to a printer. 

Around this time I participated in a study group where we were sharing our current works-in-progress and I described my  approach to building out my Rails app. Little did I know, it turns out that I was actually doing it the preferred way, and there is a name for it - building vertically. When you build horizontally, i.e. first doing all your migrations and all your tables for the entire scope of your app, and then all your models, then all your controllers... it can get messy, quickly. Well, that's what they say, I'll take their word for it! Many of my labs were done quasi-horizontally, and it could indeed be confusing. I'm glad I revised my approach with my Rails project. I was also told in the study group that the vertical-building approach is addressed directly in one of the labs in the Javascript section (*after* Rails), so I feel like I sneakily figured out something ahead of the game. Speaking of the Javascript section – that's where I will be by the time of my next blog post! Can't wait!
